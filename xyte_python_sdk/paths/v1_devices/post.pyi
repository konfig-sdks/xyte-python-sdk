# coding: utf-8

"""
    Testing API

    Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from xyte_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from xyte_python_sdk.api_response import AsyncGeneratorResponse
from xyte_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xyte_python_sdk import schemas  # noqa: F401

from xyte_python_sdk.model.device_create_registration_response import DeviceCreateRegistrationResponse as DeviceCreateRegistrationResponseSchema
from xyte_python_sdk.model.device_create_registration422_response import DeviceCreateRegistration422Response as DeviceCreateRegistration422ResponseSchema
from xyte_python_sdk.model.device_create_registration400_response import DeviceCreateRegistration400Response as DeviceCreateRegistration400ResponseSchema
from xyte_python_sdk.model.device_create_registration_request import DeviceCreateRegistrationRequest as DeviceCreateRegistrationRequestSchema

from xyte_python_sdk.type.device_create_registration_response import DeviceCreateRegistrationResponse
from xyte_python_sdk.type.device_create_registration_request import DeviceCreateRegistrationRequest
from xyte_python_sdk.type.device_create_registration400_response import DeviceCreateRegistration400Response
from xyte_python_sdk.type.device_create_registration422_response import DeviceCreateRegistration422Response

from ...api_client import Dictionary
from xyte_python_sdk.pydantic.device_create_registration_request import DeviceCreateRegistrationRequest as DeviceCreateRegistrationRequestPydantic
from xyte_python_sdk.pydantic.device_create_registration422_response import DeviceCreateRegistration422Response as DeviceCreateRegistration422ResponsePydantic
from xyte_python_sdk.pydantic.device_create_registration_response import DeviceCreateRegistrationResponse as DeviceCreateRegistrationResponsePydantic
from xyte_python_sdk.pydantic.device_create_registration400_response import DeviceCreateRegistration400Response as DeviceCreateRegistration400ResponsePydantic

# body param
SchemaForRequestBodyApplicationJson = DeviceCreateRegistrationRequestSchema


request_body_device_create_registration_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = DeviceCreateRegistration400ResponseSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: DeviceCreateRegistration400Response


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: DeviceCreateRegistration400Response


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = DeviceCreateRegistration422ResponseSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: DeviceCreateRegistration422Response


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: DeviceCreateRegistration422Response


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
SchemaFor2XXResponseBodyApplicationJson = DeviceCreateRegistrationResponseSchema


@dataclass
class ApiResponseFor2XX(api_client.ApiResponse):
    body: DeviceCreateRegistrationResponse


@dataclass
class ApiResponseFor2XXAsync(api_client.AsyncApiResponse):
    body: DeviceCreateRegistrationResponse


_response_for_2XX = api_client.OpenApiResponse(
    response_cls=ApiResponseFor2XX,
    response_cls_async=ApiResponseFor2XXAsync,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor2XXResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_registration_mapped_args(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _body = {}
        if mac is not None:
            _body["mac"] = mac
        if sn is not None:
            _body["sn"] = sn
        if cloud_id is not None:
            _body["cloud_id"] = cloud_id
        if firmware_version is not None:
            _body["firmware_version"] = firmware_version
        if hardware_key is not None:
            _body["hardware_key"] = hardware_key
        if name is not None:
            _body["name"] = name
        if details is not None:
            _body["details"] = details
        if sub_model is not None:
            _body["sub_model"] = sub_model
        if parent_id is not None:
            _body["parent_id"] = parent_id
        args.body = _body
        return args

    async def _acreate_registration_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor2XXAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Register Device
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/devices',
            body=body,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_device_create_registration_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_registration_oapg(
        self,
        body: typing.Any = None,
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor2XX,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Register Device
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        used_path = path.value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/v1/devices',
            body=body,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_device_create_registration_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateRegistrationRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_registration(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor2XXAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_registration_mapped_args(
            sn=sn,
            firmware_version=firmware_version,
            hardware_key=hardware_key,
            mac=mac,
            cloud_id=cloud_id,
            name=name,
            details=details,
            sub_model=sub_model,
            parent_id=parent_id,
        )
        return await self._acreate_registration_oapg(
            body=args.body,
            **kwargs,
        )
    
    def create_registration(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor2XX,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_registration_mapped_args(
            sn=sn,
            firmware_version=firmware_version,
            hardware_key=hardware_key,
            mac=mac,
            cloud_id=cloud_id,
            name=name,
            details=details,
            sub_model=sub_model,
            parent_id=parent_id,
        )
        return self._create_registration_oapg(
            body=args.body,
        )

class CreateRegistration(BaseApi):

    async def acreate_registration(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> DeviceCreateRegistrationResponsePydantic:
        raw_response = await self.raw.acreate_registration(
            sn=sn,
            firmware_version=firmware_version,
            hardware_key=hardware_key,
            mac=mac,
            cloud_id=cloud_id,
            name=name,
            details=details,
            sub_model=sub_model,
            parent_id=parent_id,
            **kwargs,
        )
        if validate:
            return DeviceCreateRegistrationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(DeviceCreateRegistrationResponsePydantic, raw_response.body)
    
    
    def create_registration(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
        validate: bool = False,
    ) -> DeviceCreateRegistrationResponsePydantic:
        raw_response = self.raw.create_registration(
            sn=sn,
            firmware_version=firmware_version,
            hardware_key=hardware_key,
            mac=mac,
            cloud_id=cloud_id,
            name=name,
            details=details,
            sub_model=sub_model,
            parent_id=parent_id,
        )
        if validate:
            return DeviceCreateRegistrationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(DeviceCreateRegistrationResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor2XXAsync,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_registration_mapped_args(
            sn=sn,
            firmware_version=firmware_version,
            hardware_key=hardware_key,
            mac=mac,
            cloud_id=cloud_id,
            name=name,
            details=details,
            sub_model=sub_model,
            parent_id=parent_id,
        )
        return await self._acreate_registration_oapg(
            body=args.body,
            **kwargs,
        )
    
    def post(
        self,
        sn: str,
        firmware_version: str,
        hardware_key: str,
        mac: typing.Optional[str] = None,
        cloud_id: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        details: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        sub_model: typing.Optional[str] = None,
        parent_id: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor2XX,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_registration_mapped_args(
            sn=sn,
            firmware_version=firmware_version,
            hardware_key=hardware_key,
            mac=mac,
            cloud_id=cloud_id,
            name=name,
            details=details,
            sub_model=sub_model,
            parent_id=parent_id,
        )
        return self._create_registration_oapg(
            body=args.body,
        )

