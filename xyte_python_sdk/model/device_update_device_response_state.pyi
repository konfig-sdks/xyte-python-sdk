# coding: utf-8

"""
    Testing API

    Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform.   We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.  Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.

    The version of the OpenAPI document: 1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from xyte_python_sdk import schemas  # noqa: F401


class DeviceUpdateDeviceResponseState(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            temp = schemas.IntSchema
            status = schemas.StrSchema
            eco_mode = schemas.BoolSchema
            presence = schemas.BoolSchema
            temp_dir = schemas.IntSchema
            data_rate = schemas.IntSchema
            coffee_used = schemas.IntSchema
            power_status = schemas.BoolSchema
            ambient_light = schemas.IntSchema
            data_rate_dir = schemas.IntSchema
            motion_sensor = schemas.BoolSchema
            coffee_used_dir = schemas.IntSchema
            ambient_light_dir = schemas.IntSchema
            __annotations__ = {
                "temp": temp,
                "status": status,
                "eco_mode": eco_mode,
                "presence": presence,
                "temp_dir": temp_dir,
                "data_rate": data_rate,
                "coffee_used": coffee_used,
                "power_status": power_status,
                "ambient_light": ambient_light,
                "data_rate_dir": data_rate_dir,
                "motion_sensor": motion_sensor,
                "coffee_used_dir": coffee_used_dir,
                "ambient_light_dir": ambient_light_dir,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temp"]) -> MetaOapg.properties.temp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eco_mode"]) -> MetaOapg.properties.eco_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presence"]) -> MetaOapg.properties.presence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["temp_dir"]) -> MetaOapg.properties.temp_dir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_rate"]) -> MetaOapg.properties.data_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coffee_used"]) -> MetaOapg.properties.coffee_used: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_status"]) -> MetaOapg.properties.power_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ambient_light"]) -> MetaOapg.properties.ambient_light: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_rate_dir"]) -> MetaOapg.properties.data_rate_dir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["motion_sensor"]) -> MetaOapg.properties.motion_sensor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coffee_used_dir"]) -> MetaOapg.properties.coffee_used_dir: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ambient_light_dir"]) -> MetaOapg.properties.ambient_light_dir: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["temp", "status", "eco_mode", "presence", "temp_dir", "data_rate", "coffee_used", "power_status", "ambient_light", "data_rate_dir", "motion_sensor", "coffee_used_dir", "ambient_light_dir", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temp"]) -> typing.Union[MetaOapg.properties.temp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eco_mode"]) -> typing.Union[MetaOapg.properties.eco_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presence"]) -> typing.Union[MetaOapg.properties.presence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["temp_dir"]) -> typing.Union[MetaOapg.properties.temp_dir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_rate"]) -> typing.Union[MetaOapg.properties.data_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coffee_used"]) -> typing.Union[MetaOapg.properties.coffee_used, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_status"]) -> typing.Union[MetaOapg.properties.power_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ambient_light"]) -> typing.Union[MetaOapg.properties.ambient_light, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_rate_dir"]) -> typing.Union[MetaOapg.properties.data_rate_dir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["motion_sensor"]) -> typing.Union[MetaOapg.properties.motion_sensor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coffee_used_dir"]) -> typing.Union[MetaOapg.properties.coffee_used_dir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ambient_light_dir"]) -> typing.Union[MetaOapg.properties.ambient_light_dir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["temp", "status", "eco_mode", "presence", "temp_dir", "data_rate", "coffee_used", "power_status", "ambient_light", "data_rate_dir", "motion_sensor", "coffee_used_dir", "ambient_light_dir", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        temp: typing.Union[MetaOapg.properties.temp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        eco_mode: typing.Union[MetaOapg.properties.eco_mode, bool, schemas.Unset] = schemas.unset,
        presence: typing.Union[MetaOapg.properties.presence, bool, schemas.Unset] = schemas.unset,
        temp_dir: typing.Union[MetaOapg.properties.temp_dir, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        data_rate: typing.Union[MetaOapg.properties.data_rate, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        coffee_used: typing.Union[MetaOapg.properties.coffee_used, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        power_status: typing.Union[MetaOapg.properties.power_status, bool, schemas.Unset] = schemas.unset,
        ambient_light: typing.Union[MetaOapg.properties.ambient_light, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        data_rate_dir: typing.Union[MetaOapg.properties.data_rate_dir, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        motion_sensor: typing.Union[MetaOapg.properties.motion_sensor, bool, schemas.Unset] = schemas.unset,
        coffee_used_dir: typing.Union[MetaOapg.properties.coffee_used_dir, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ambient_light_dir: typing.Union[MetaOapg.properties.ambient_light_dir, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceUpdateDeviceResponseState':
        return super().__new__(
            cls,
            *args,
            temp=temp,
            status=status,
            eco_mode=eco_mode,
            presence=presence,
            temp_dir=temp_dir,
            data_rate=data_rate,
            coffee_used=coffee_used,
            power_status=power_status,
            ambient_light=ambient_light,
            data_rate_dir=data_rate_dir,
            motion_sensor=motion_sensor,
            coffee_used_dir=coffee_used_dir,
            ambient_light_dir=ambient_light_dir,
            _configuration=_configuration,
            **kwargs,
        )
